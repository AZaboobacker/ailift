name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Find new folder
      id: newfolder
      run: |
        git fetch --depth=2
        # Get the commit hashes
        PREV_COMMIT=$(git log --pretty=format:%H -n 2 | tail -n 1)
        NEW_COMMIT=$(git log --pretty=format:%H -n 1)
        echo "Previous commit: $PREV_COMMIT"
        echo "New commit: $NEW_COMMIT"
        
        # Find new or modified folders
        NEW_FOLDER=$(git diff --name-only $PREV_COMMIT $NEW_COMMIT | grep -oE '^[^/]+/' | sort -u | head -n 1 || echo "")
        if [ -z "$NEW_FOLDER" ]; then
          echo "No new folder detected. Exiting."
          exit 1
        fi
        NEW_FOLDER=$(echo "$NEW_FOLDER" | sed 's:/*$::')
        echo "NEW_FOLDER=${NEW_FOLDER}" >> $GITHUB_ENV
      shell: bash

    - name: Debug new folder
      run: echo "New folder is:${{ env.NEW_FOLDER }}"
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Create ECR Repository if it doesn't exist
      run: |
        REPO_NAME=${{ env.NEW_FOLDER }}
        aws ecr describe-repositories --repository-names $REPO_NAME || \
        aws ecr create-repository --repository-name $REPO_NAME
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Copy Dockerfile
      run: |
        cp Dockerfile ${{ env.NEW_FOLDER }}

    - name: Build, tag, and push Docker image
      run: |
        REPO_NAME=${{ env.NEW_FOLDER }}
        cd $REPO_NAME
        docker build -t $REPO_NAME:latest -f ../Dockerfile .
        docker tag $REPO_NAME:latest ${{ secrets.ECR_REGISTRY }}/$REPO_NAME:latest
        docker push ${{ secrets.ECR_REGISTRY }}/$REPO_NAME:latest

    - name: Deploy to AWS App Runner
      run: |
        REPO_NAME=${{ env.NEW_FOLDER }}
        SERVICE_NAME=${REPO_NAME}-service
        aws apprunner create-service --service-name $SERVICE_NAME --source-configuration "{
          \"ImageRepository\": {
            \"ImageIdentifier\": \"${{ secrets.ECR_REGISTRY }}/$REPO_NAME:latest\",
            \"ImageConfiguration\": {
              \"Port\": \"8501\"
            }
          },
          \"AuthenticationConfiguration\": {
            \"AccessRoleArn\": \"${{ secrets.APP_RUNNER_ROLE_ARN }}\"
          }
        }"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
